extends StaticBody2D

@export var ingredient_name: String   # Name of the ingredient generated by this bench
@export var ingredient_icon: Texture2D            # Icon or sprite of the ingredient
@export var max_quantity: int = 3                 # Maximum number of ingredients available
@export var cooldown: float = 2.0                 # Cooldown time between generations (seconds)
@export var ingredient_quantity_label: Label
var current_quantity: int                         # Tracks how many ingredients are left
var can_generate: bool = true                     # Controls if the bench is ready or cooling down

signal ingredient_picked(ingredient: Dictionary)

func _ready() -> void:
	# Initialize with max quantity
	current_quantity = max_quantity
	_update_label()

func interact(player: Node) -> void:
	# Check if the bench is in cooldown
	if not can_generate:
		print("Bench is cooling down...")
		return

	# Check if there are ingredients left
	if current_quantity <= 0:
		print("No more ", ingredient_name, " left!")
		return

	# Give ingredient only if the player has a pickup method and is not holding anything
	if player.has_method("pickup_ingredient") and player.held_ingredient.is_empty():
		var ingredient = {
			"name": ingredient_name,
			"icon": ingredient_icon
		}
		player.pickup_ingredient(ingredient)
		emit_signal("ingredient_picked", ingredient)

		# Reduce available quantity
		current_quantity -= 1
		_update_label()
		print("Remaining: ", current_quantity)

		# Start cooldown
		can_generate = false
		await get_tree().create_timer(cooldown).timeout
		can_generate = true

func _update_label() -> void:
	if ingredient_quantity_label:
		ingredient_quantity_label.text = str(current_quantity) + "/" + str(max_quantity)

''' CÃ“DIGO PRA COLOCAR NO PLAYER
var held_ingredient: Dictionary = {}   # What the player is currently holding

func pickup_ingredient(ingredient: Dictionary) -> void:
    if held_ingredient.is_empty():
        held_ingredient = ingredient
        print("Picked up: ", ingredient["name"])
'''
